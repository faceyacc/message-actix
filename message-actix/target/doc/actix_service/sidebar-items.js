initSidebarItems({"enum":[["MappedConfig",""]],"fn":[["apply_cfg","Convert `Fn(&Config, &mut Service) -> Future<Service>` fn to a NewService"],["apply_fn","Apply tranform function to a service"],["apply_transform","Apply transform to service factory. Function returns services factory that in initialization creates service and applies transform to this service."],["new_apply_cfg","Convert `Fn(&Config, &mut Service) -> Future<Service>` fn to a NewService Service get constructor from NewService."],["new_apply_fn","Create factory for `apply` service."],["new_service_cfg","Create `NewService` for function that can produce services with configuration"],["new_service_fn","Create `NewService` for function that can produce services"],["service_fn","Create `NewService` for function that can act as a Service"],["transform_fn","Use function as transform service"]],"mod":[["blank",""],["boxed",""]],"struct":[["AndThen","Service for the `and_then` combinator, chaining a computation onto the end of another service which completes successfully."],["AndThenNewService","`AndThenNewService` new service combinator"],["ApplyNewService","`ApplyNewService` new service combinator"],["FromErr","Service for the `from_err` combinator, changing the error type of a service."],["FromErrNewService","NewService for the `from_err` combinator, changing the type of a new service’s error."],["Map","Service for the `map` combinator, changing the type of a service’s response."],["MapConfig","`MapInitErr` service combinator"],["MapErr","Service for the `map_err` combinator, changing the type of a service’s error."],["MapErrNewService","NewService for the `map_err` combinator, changing the type of a new service’s error."],["MapInitErr","`MapInitErr` service combinator"],["MapNewService","`MapNewService` new service combinator"],["ServiceFn",""],["Then","Service for the `then` combinator, chaining a computation onto the end of another service."],["ThenNewService","`ThenNewService` new service combinator"],["UnitConfig","`MapInitErr` service combinator"]],"trait":[["IntoNewService","Trait for types that can be converted to a `NewService`"],["IntoService","Trait for types that can be converted to a `Service`"],["IntoTransform","Trait for types that can be converted to a transform service"],["NewService","Creates new `Service` values."],["Service","An asynchronous function from `Request` to a `Response`."],["ServiceExt","An extension trait for `Service`s that provides a variety of convenient adapters"],["Transform","The `Transform` trait defines the interface of a Service factory. `Transform` is often implemented for middleware, defining how to construct a middleware Service. A Service that is constructed by the factory takes the Service that follows it during execution as a parameter, assuming ownership of the next Service."]]});